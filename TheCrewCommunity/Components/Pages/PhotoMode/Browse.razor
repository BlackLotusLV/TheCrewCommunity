@page "/PhotoMode/Browse"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using TheCrewCommunity.Data
@using TheCrewCommunity.Data.GameData
@using TheCrewCommunity.Data.WebData
@inject IDbContextFactory<LiveBotDbContext> DbContextFactory
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ILogger<Browse> Logger
@inject IMemoryCache Cache
@rendermode InteractiveServer

<PageTitle>Browsing Images</PageTitle>
<div class="filters">
    <h2>Filters:</h2>
    <select class="filter-select" @onchange="OnGameSelected">
        <option value="@Guid.Empty">All Games</option>
        @foreach (Game game in _games!)
        {
            <option value="@game.Id">@game.Name</option>
        }
    </select>
    <select class="filter-select" @onchange="OnSortModeSelectedAsync">
        @foreach (SortMode option in Enum.GetValues(typeof(SortMode)))
        {
            <option value="@option">@(option.ToString())</option>
        }
    </select>
</div>
<div class="image-grid">
    @for (var i = 0; i < _currentLoadEnd; i++)
    {
        Guid id = _images[i].Id;
        Game game = _images[i].Game!;
        <div class="image-container">
            <img class="image-thumb" src="@($"https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/{id}/Thumbnail")" alt="@id" @onclick='@(_ => OpenImage(id))'/>
            <img class="game-logo" src="assets/Icons/@game.IconFile" alt="@game.Name logo"/>
        </div>
    }
</div>

<div class="load-more">
    @if (_isLoading)
    {
        <p>Loading images...</p>
    }
    else if (_currentLoadEnd == _images.Length)
    {
        <p>All images loaded</p>
    }
    else
    {
    <button class="load-more-button" @ref="_loadMoreButton" @onclick="LoadMoreImages">Load more</button>
    }
</div>
@code {

    private ElementReference _loadMoreButton;
    private const int InitialLoadSize = 50;
    private bool _isLoading;
    private const uint ImageLoadSize = 30;
    private uint _currentLoadEnd;

    // thumbnail url template https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/<image_id>/Thumbnail
    private UserImage[] _images = [];
    UserImage[] _unfilteredImages = [];
    Game[]? _games = [];
    Guid _selectedGameId;
    SortMode _selectedSortMode = SortMode.New;

    protected override async Task OnInitializedAsync()
    {
        LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        _unfilteredImages = dbContext.UserImages
            .Include(x=>x.Game)
            .Include(x=>x.ImageLikes)
            .OrderByDescending(x => x.UploadDateTime).ToArray();

        _games = await Cache.GetOrCreateAsync("GameOptionsKey", async _ => await dbContext.Games.ToArrayAsync());
        _images = _unfilteredImages;

        SetCurrentLoadEnd();
    }

    async Task OnGameSelected(ChangeEventArgs e)
    {
        if (e.Value is null)
        {
            Logger.LogDebug("Value of selected object is null. Stopping process");
            return;
        }
        _selectedGameId = Guid.Parse(e.Value.ToString() ?? string.Empty);
        await ApplyFilterAsync();
    }

    async Task OnSortModeSelectedAsync(ChangeEventArgs e)
    {
        _selectedSortMode = Enum.TryParse(typeof(SortMode), e.Value?.ToString() ?? "New", out object? mode) ? (SortMode)mode : SortMode.New;
        await ApplyFilterAsync();
    }

    async Task ApplyFilterAsync()
    {
        if (_selectedGameId == Guid.Empty)
        {
            _images = _unfilteredImages;
            Logger.LogDebug(CustomLogEvents.PhotoBrowse,"No game selected, loading all images");
        }
        else
        {
            _images = _unfilteredImages.Where(x => x.GameId == _selectedGameId).ToArray();
            Logger.LogDebug(CustomLogEvents.PhotoBrowse, "Game filter set to {GameId}", _selectedGameId);
        }

        switch (_selectedSortMode)
        {
            case SortMode.New:
                _images = _images.OrderByDescending(x => x.UploadDateTime).ToArray();
                break;
            case SortMode.Hot:
                SortImagesByHotness();
                break;
            case SortMode.TopToday:
                SortImagesByLikes(365);
                break;
            case SortMode.TopWeek:
                SortImagesByLikes(365);
                break;
            case SortMode.TopMonth:
                SortImagesByLikes(365);
                break;
            case SortMode.TopYear:
                SortImagesByLikes(365);
                break;
            case SortMode.TopAllTime:
                _images = _images.OrderByDescending(x => x.ImageLikes).ToArray();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        
        SetCurrentLoadEnd();
        await Task.Delay(10);
        await JsRuntime.InvokeVoidAsync("applyOnLoadToImages");
    }

    void SortImagesByHotness()
    {
        var imagesAndLikes = _images.Select(x =>
        {
            return new
            {
                Image = x,
                Weighting = x.ImageLikes!.Where(like => like.Date > DateTime.UtcNow.AddHours(-5))
                    .Select(like => new LikeWeighting { Likes = x.ImageLikes!.Count(imageLike => imageLike.Date.Date >= DateTime.UtcNow.Date.AddHours(-1)), Recency = DateTime.Now - like.Date})
                    .Sum(lw => lw.HotScore)
            };
        });
        _images = imagesAndLikes.OrderByDescending(x => x.Weighting).Select(x => x.Image).ToArray();
    }

    void SortImagesByLikes(int days)
    {
        var imagesAndLikes = _images.Select(x =>
        {
            return new
            {
                Image = x,
                Likes = x.ImageLikes!.Count(like => like.Date.Date >= DateTime.UtcNow.Date.AddDays(-days))
            };
        });
        _images = imagesAndLikes.OrderByDescending(x => x.Likes).Select(x => x.Image).ToArray();
    }

    void SetCurrentLoadEnd()
    {
        if (_images.Length<InitialLoadSize-1)
        {
            _currentLoadEnd = (uint)_images.Length;
        }
        else
        {
            _currentLoadEnd = InitialLoadSize - 1;
        }
    }

    [JSInvokable]
    public async Task LoadMoreImages()
    {
        _isLoading = true;
        if (_currentLoadEnd >= _images.Length)
        {
            return;
        }

        _currentLoadEnd += ImageLoadSize;
        if (_currentLoadEnd > _images.Length)
        {
            _currentLoadEnd = (uint)_images.Length;
        }

        await InvokeAsync(StateHasChanged);
        Logger.LogDebug(CustomLogEvents.PhotoBrowse,"Loaded more images");
        await Task.Delay(10);
        await JsRuntime.InvokeVoidAsync("applyOnLoadToImages");
        Logger.LogDebug(CustomLogEvents.PhotoBrowse,"Adding vertical class to images");
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("OnLoad", DotNetObjectReference.Create(this), _loadMoreButton);
        }
    }

    private Task OpenImage(Guid id)
    {
        NavigationManager.NavigateTo($"/i/{id}");
        return Task.CompletedTask;
    }

    enum SortMode
    {
        [Display(Name = "New")]
        New,
        [Display(Name = "Hot")]
        Hot,
        [Display(Name = "New Today")]
        TopToday,
        [Display(Name = "Top this week")]
        TopWeek,
        [Display(Name = "Top this month")]
        TopMonth,
        [Display(Name = "Top this year")]
        TopYear,
        [Display(Name = "Top of all Time")]
        TopAllTime
    }
    public class LikeWeighting
    {
        public int Likes { get; init; }
        public TimeSpan Recency { get; init; }
        public double HotScore => Likes / Recency.TotalHours;
    }

}
<script>
    function InitInfiniteScroll(dotnetHelper,loadMoreButton) {
        let options={
        root: null,
        rootMargin: '0px',
        threshold: 1.0
        }
        let observer = new IntersectionObserver(function (entries, observer){
            entries.forEach(entry=>{
                if (entry.isIntersecting){
                    dotnetHelper.invokeMethodAsync('LoadMoreImages');
                }
            })
        }, options);
        observer.observe(loadMoreButton);
    }
    function applyOnLoadToImages() {
        let images = document.querySelectorAll('.image-grid img:not(.game-logo)');
        console.log('Iterating on all images');
        images.forEach(function(img) {
            // remove the processed-image class if it is present
            if (img.classList.contains('processed-image')) {
                img.classList.remove('processed-image');
            }

            // remove the vertical-image class from the image parent node if it is present
            if (img.parentNode.classList.contains('vertical-image')) {
                img.parentNode.classList.remove('vertical-image');
            }
            img.onload = function() {
                if (img.naturalHeight > img.naturalWidth) {
                    img.parentNode.classList.add('vertical-image');
                    console.log('Added vertical image class to image');
                }
                img.classList.add('processed-image');
                console.log('added processed-image')
                img.onload = null;
            };
            // This forces the onload event if the image is loaded from the cache
            if (img.complete) {
                img.onload();
            }
        });
    }
    function OnLoad() {
        applyOnLoadToImages();
    }

</script>