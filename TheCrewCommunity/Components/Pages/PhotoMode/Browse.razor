@page "/PhotoMode/Browse"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using TheCrewCommunity.Data
@using TheCrewCommunity.Data.GameData
@inject IDbContextFactory<LiveBotDbContext> DbContextFactory
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ILogger<Browse> Logger
@inject IMemoryCache Cache
@rendermode InteractiveServer

<PageTitle>Browsing Images</PageTitle>
<div class="filters">
    <h2>Filters:</h2>
    <select class="filter-select" @onchange="OnGameSelected">
        <option value="@Guid.Empty">All Games</option>
        @foreach (Game game in _games!)
        {
            <option value="@game.Id">@game.Name</option>
        }
    </select>
    <select class="filter-select" @onchange="OnSortModeSelectedAsync">
        @foreach (SortMode option in Enum.GetValues(typeof(SortMode)))
        {
            <option value="@option">@(option.ToString())</option>
        }
    </select>
</div>
<div class="image-grid">
    @for (var i = 0; i < _currentLoadEnd; i++)
    {
        Guid id = _images[i].Id;
        Game game = _images[i].Game!;
        <div class="image-container">
            <img class="image-thumb" src="@($"https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/{id}/Thumbnail")" alt="@id" @onclick='@(_ => OpenImage(id))'/>
            <img class="game-logo" src="assets/Icons/@game.IconFile" alt="@game.Name logo"/>
        </div>
    }
</div>

<div class="load-more">
    @if (_isLoading)
    {
        <p>Loading images...</p>
    }
    else if (_currentLoadEnd == _images.Length)
    {
        <p>All images loaded</p>
    }
    else
    {
    <button class="load-more-button" @ref="_loadMoreButton" @onclick="LoadMoreImages">Load more</button>
    }
</div>
@code {

    

}
<script>
    function InitInfiniteScroll(dotnetHelper,loadMoreButton) {
        let options={
        root: null,
        rootMargin: '0px',
        threshold: 1.0
        }
        let observer = new IntersectionObserver(function (entries, observer){
            entries.forEach(entry=>{
                if (entry.isIntersecting){
                    dotnetHelper.invokeMethodAsync('LoadMoreImages');
                }
            })
        }, options);
        observer.observe(loadMoreButton);
    }
    function applyOnLoadToImages() {
        let images = document.querySelectorAll('.image-grid img:not(.game-logo)');
        console.log('Iterating on all images');
        images.forEach(function(img) {
            // remove the processed-image class if it is present
            if (img.classList.contains('processed-image')) {
                img.classList.remove('processed-image');
            }

            // remove the vertical-image class from the image parent node if it is present
            if (img.parentNode.classList.contains('vertical-image')) {
                img.parentNode.classList.remove('vertical-image');
            }
            img.onload = function() {
                if (img.naturalHeight > img.naturalWidth) {
                    img.parentNode.classList.add('vertical-image');
                    console.log('Added vertical image class to image');
                }
                img.classList.add('processed-image');
                console.log('added processed-image')
                img.onload = null;
            };
            // This forces the onload event if the image is loaded from the cache
            if (img.complete) {
                img.onload();
            }
        });
    }
    function OnLoad() {
        applyOnLoadToImages();
    }

</script>