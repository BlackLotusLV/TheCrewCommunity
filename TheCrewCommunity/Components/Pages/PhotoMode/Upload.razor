@page "/PhotoMode/Upload"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TheCrewCommunity.Data
@using TheCrewCommunity.Data.GameData
@using TheCrewCommunity.Data.WebData
@using TheCrewCommunity.Services
@inject ICloudFlareImageService CloudFlareImageService
@inject IDatabaseMethodService DatabaseMethodService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IDbContextFactory<LiveBotDbContext> DbContextFactory
@inject ILogger<Upload> Logger
@rendermode InteractiveServer

@if (_isLoading)
{
    <p>Uploading...</p>
}
else
{
    <EditForm Model="_uploadModel" OnValidSubmit="HandleUpload" class="form-container">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label for="formFile">Choose file</label>
            <InputFile id="formFile" OnChange="HandleFileSelected" required/>
        </div>
        <div class="form-group">
            <label for="title">Title:</label>
            <InputText id="title" @bind-Value="_uploadModel.Title" class="form-content"/>
        </div>
        <div class="form-group">
            <label for="game">Game</label>
            <InputSelect id="game" @bind-Value="_uploadModel.GameId" class="form-content">
                <option value="" disabled selected>Select an option</option>
                @foreach (Game game in Games)
                {
                    <option value="@game.Id">@game.Name</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <button type="submit" class="button">Upload</button>
        </div>
        <ValidationSummary/>
    </EditForm>
}


@code {
    private bool _isLoading = false;

    private class UploadModel
    {
        [Required(ErrorMessage = "Select a file")]
        public byte[] Image { get; set; }

        [MaxLength(40, ErrorMessage = "Title can not be longer than 40 characters")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "You must select a game")]
        public Guid? GameId { get; set; }
    }

    private string _fileName = string.Empty;

    private readonly UploadModel _uploadModel = new();

    private ApplicationUser? _user;
    private List<Game> Games { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            await using LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
            string? userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            _user = await dbContext.ApplicationUsers.FirstOrDefaultAsync(x => x.DiscordId == ulong.Parse(userId));
            Games = await dbContext.Games.ToListAsync();
        }

        if (_user is null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleUpload()
    {
        if (_user is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        if (string.IsNullOrEmpty(_uploadModel.Title))
        {
            _uploadModel.Title = _fileName;
        }

        if (!_uploadModel.GameId.HasValue)
        {
            NavigationManager.NavigateTo("/PhotoMode/Upload");
            Logger.LogDebug(CustomLogEvents.PhotoUpload, "Game Id has no value, reloading the page");
            return;
        }

        Guid nonNullableGameId = _uploadModel.GameId.Value;

        // upload image code here
        _isLoading = true;
        PostImageResponse response = await CloudFlareImageService.PostImageAsync(_uploadModel.Image);
        if (response is { Success: true, Result: not null })
        {
            await DatabaseMethodService.AddUserImageAsync(_user, Guid.Parse(response.Result.Id), _uploadModel.Title, nonNullableGameId);
            NavigationManager.NavigateTo($"/i/{response.Result.Id}");
        }

        _isLoading = false;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        Logger.LogDebug(CustomLogEvents.PhotoUpload, "Image added to the form");
        IBrowserFile? file = e.File;
        if (file is null) return;
        string ext = Path.GetExtension(file.Name);
        if (ext is ".png" or ".jpeg" or ".webp")
        {
            Logger.LogDebug(CustomLogEvents.PhotoUpload, "File extension is supported, preparing to set image as byte array");
            _fileName = Path.GetFileNameWithoutExtension(file.Name);
            using MemoryStream ms = new();
            await file.OpenReadStream(10485760).CopyToAsync(ms);
            _uploadModel.Image = ms.ToArray();
            Logger.LogDebug(CustomLogEvents.PhotoUpload, "Image added as byte array, its length: {Length}", _uploadModel.Image.Length);
        }
    }

}