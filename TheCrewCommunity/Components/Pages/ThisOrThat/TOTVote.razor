@page "/ThisOrThat/Vote"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Caching.Memory
@using TheCrewCommunity.Data
@using TheCrewCommunity.Data.WebData
@using TheCrewCommunity.Data.WebData.ThisOrThat
@using TheCrewCommunity.Services
@attribute [Authorize]
@inject IDbContextFactory<LiveBotDbContext> DbContextFactory
@inject IMemoryCache MemoryCache
@inject ILogger<TOTVote> Logger
@inject BrowserService BrowserService
@inject IThisOrThatLeaderboardService LeaderboardService
@rendermode InteractiveServer
<PageTitle>This or That?</PageTitle>
<h3>This or That?</h3>
@if (_addingVote)
{
    <div class="overlay-container">
        <p>Submitting your vote... <span><i class="fa fa-spinner fa-spin-pulse"></i></span></p>
    </div>
}
@if (CurrentChoice is null)
{
    <p>Nothing to vote on, come back when more items have been added. ;)</p>
}
else
{
    <div class="progress-container">
        <div class="progress-bar" style="width: @($"{_progress}%")"></div>
    </div>
    @if (_showingStats)
    {
        <div class="stats-container">
            <div class="stats-header">
                <h4>Vote Results</h4>
                <div class="timer-container">
                    <div class="timer-bar" style="width: @(_timerProgress-10)%"></div>
                    <span class="timer-text">Next vote in @_timerSeconds seconds</span>
                </div>
            </div>
            <div class="stats-content">
                <div class="selected-vehicle">
                    <h5>Your Selection</h5>
                    <div class="vehicle-display">
                        <div class="vehicle-image">
                            <img src="https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/@_lastSelection.ImageId/w=@_imageWidth"
                                alt="selected vehicle"/>
                        </div>
                        <div class="vehicle-info">
                            <p class="vehicle-name">@_lastSelection.Brand - @_lastSelection.Model (@_lastSelection.Year)</p>
                            <div class="vote-stats">
                                <h6>In This Matchup</h6>
                                <div class="vote-bar-container">
                                    <div class="vote-bar" style="width: @((_lastMatchupFor * 100.0 / Math.Max(1, _lastMatchupFor + _lastMatchupAgainst)).ToString("0.0"))%">
                                        <span class="vote-percent">@((_lastMatchupFor * 100.0 / Math.Max(1, _lastMatchupFor + _lastMatchupAgainst)).ToString("0.0"))%</span>
                                    </div>
                                </div>
                                <p class="vote-details">@_lastMatchupFor for vs @_lastMatchupAgainst against (@(_lastMatchupFor + _lastMatchupAgainst) total)</p>
                            </div>
                            <div class="vote-stats">
                                <h6>All Time</h6>
                                <div class="vote-bar-container">
                                    <div class="vote-bar" style="width: @((_lastTotalFor * 100.0 / Math.Max(1, _lastTotalFor + _lastTotalAgainst)).ToString("0.0"))%">
                                        @if (_userTotalVotes > 0)
                                        {
                                            <div class="user-vote-marker" style="width: @((_userTotalVotes * 100.0 / Math.Max(1, _lastTotalFor + _lastTotalAgainst)).ToString("0.0"))%" 
                                                 title="@((_userTotalVotes * 100.0 / Math.Max(1, _lastTotalFor + _lastTotalAgainst)).ToString("0.0"))% of votes by you"></div>
                                        }
                                        <span class="vote-percent">@((_lastTotalFor * 100.0 / Math.Max(1, _lastTotalFor + _lastTotalAgainst)).ToString("0.0"))%</span>
                                    </div>
                                </div>
                                <p class="vote-details">@_lastTotalFor for vs @_lastTotalAgainst against (@(_lastTotalFor + _lastTotalAgainst) total)</p>
                            </div>
                            <div class="leaderboard-info">
                                <h6>Leaderboard Stats</h6>
                                @if (_leaderboardRank.HasValue)
                                {
                                    <p class="leaderboard-rank">
                                        Rank: <span class="rank-value">@_leaderboardRank</span> of @_totalVehicles vehicles
                                        <span class="leaderboard-update-info">
                                            (Last updated: @_leaderboardUpdateTime.ToString("HH:mm") UTC, refreshes every 5 minutes)
                                        </span>
                                    </p>
                                    <NavLink href="/ThisOrThat/Leaderboard" class="view-leaderboard-link">View Full Leaderboard</NavLink>
                                }
                                else
                                {
                                    <p>Vehicle not yet ranked on the leaderboard.</p>
                                    <p class="leaderboard-update-info">
                                        The leaderboard updates every 5 minutes.
                                    </p>
                                }
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="stats-footer">
                <button @onclick="@(_ => _showingStats = false)" class="next-vote-btn">Skip to Next Vote</button>
            </div>
        </div>
    }
    else
    {
        <div class="container"
             @ontouchstart="HandleTouchStart"
             @ontouchmove="HandleTouchMove"
             @ontouchend="HandleTouchEnd">
            <div class="image-container @(_swipingLeft ? "swiping-left" : "") @(_swipingRight ? "swiping-right" : "")" style="transform: translateX(@(-_rightImageTransform)px)">
                <div class="info">
                    <h4>@CurrentChoice?.Item1.Brand - @CurrentChoice?.Item1.Model (@CurrentChoice?.Item1.Year)</h4>
                    <p class="swipe-hint">Swipe left to vote <i class="fas fa-hand-point-left"></i></p>
                    <p>@CurrentChoice?.Item1.Description</p>
                </div>
                <img src="https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/@CurrentChoice?.Item1.ImageId/w=@_imageWidth"
                     alt="@CurrentChoice?.Item1.Model"/>
                <div class="overlay" @onclick="@(_ => @VoteAsync(CurrentChoice?.Item1!))">This</div>
            </div>
            <div class="image-container @(_swipingLeft ? "swiping-left" : "") @(_swipingRight ? "swiping-right" : "")" style="transform: translateX(@(_leftImageTransform)px)">
                <div class="info">
                    <h4>@CurrentChoice?.Item2.Brand - @CurrentChoice?.Item2.Model (@CurrentChoice?.Item2.Year)</h4>
                    <p class="swipe-hint"><i class="fas fa-hand-point-right"></i> Swipe right to vote</p>
                    <p>@CurrentChoice?.Item2.Description</p>
                </div>
                <img src="https://imagedelivery.net/Gym1gfQYlAl-qmVmCPEnkA/@CurrentChoice?.Item2.ImageId/w=@_imageWidth"
                     alt="@CurrentChoice?.Item2.Model"/>
                <div class="overlay" @onclick="@(_ => @VoteAsync(CurrentChoice?.Item2!))">That</div>
            </div>

            <div class="mobile-vote-buttons">
                <button class="mobile-vote-button" @onclick="@(_ => @VoteAsync(CurrentChoice?.Item1!))">
                    <i class="fas fa-check"></i> Vote @CurrentChoice?.Item1.Model
                </button>
                <button class="mobile-vote-button" @onclick="@(_ => @VoteAsync(CurrentChoice?.Item2!))">
                    <i class="fas fa-check"></i> Vote @CurrentChoice?.Item2.Model
                </button>
            </div>

        </div>
    }
    <GoogleAdSense Slot="4288077832" AdsFormat="Horizontal" Style="display:inline-block;width:700px;height:100px" FullWidthResponsive="false"/>
    
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    List<VehicleSuggestion> _vehicleSuggestions = null!;
    List<(VehicleSuggestion, VehicleSuggestion)>? _uniquePairs;
    private ApplicationUser CurrentUser { get; set; } = null!;
    (VehicleSuggestion, VehicleSuggestion)? CurrentChoice { get; set; }
    private bool _isSwiping, _swipingLeft, _swipingRight, _addingVote, _showingStats;
    private double _touchStartX, _progress, _leftImageTransform, _rightImageTransform;
    const int SwipeThreshold = 50;
    private VehicleSuggestion _lastSelection = null!;
    private int _timerSeconds = 10;
    private double _timerProgress = 100;
    private Timer? _statsTimer;
    private int _lastMatchupFor, _lastMatchupAgainst, _lastTotalFor, _lastTotalAgainst, _userTotalVotes, _totalVehicles, _imageWidth;
    private int? _leaderboardRank;
    private DateTime _leaderboardUpdateTime;


    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is null)
        {
            throw new Exception("Authentication state was null, stopping");
        }

        AuthenticationState authState = await AuthenticationState;
        ClaimsPrincipal user = authState.User;
        await using LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        if (user.Identity is { IsAuthenticated: true })
        {
            string? userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            CurrentUser = await dbContext.ApplicationUsers
                .Include(x => x.SuggestionVotes)
                .FirstAsync(x => x.DiscordId == ulong.Parse(userId!));
        }

        _vehicleSuggestions = await dbContext.VehicleSuggestions.ToListAsync();
        try
        {
            _uniquePairs = MemoryCache.GetOrCreate("uniquePairsList", entry =>
            {
                entry.SetSlidingExpiration(TimeSpan.FromDays(1));
                entry.SetAbsoluteExpiration(TimeSpan.FromDays(5));
                return GenerateUniquePairList();
            });
        }
        catch (Exception)
        {
            _uniquePairs = null;
            Logger.LogInformation("Failed to load unique pairs for TOT vote. Add items to the database to generate unique pairs");
        }

        CurrentChoice = await GenerateRandomSuggestionVoteAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _imageWidth = await BrowserService.GetWindowWidth();
            _imageWidth = _imageWidth / 2;
            if (_imageWidth < 500)
            {
                _imageWidth = 500;
            }

            BrowserService.OnResize += HandleResize;
            await BrowserService.InitializeResizeListener();
            StateHasChanged();
        }
    }

    private void HandleResize(int width, int height)
    {
        _imageWidth = width / 2;
        if (_imageWidth < 500)
        {
            _imageWidth = 500;
        }

        StateHasChanged();
    }


    private List<(VehicleSuggestion, VehicleSuggestion)> GenerateUniquePairList()
    {
        if (_vehicleSuggestions.Count < 2)
        {
            return [];
        }

        var uniquePairs = new List<(VehicleSuggestion, VehicleSuggestion)>();
        for (var i = 0; i < _vehicleSuggestions.Count; i++)
        {
            for (int j = i + 1; j < _vehicleSuggestions.Count; j++)
            {
                uniquePairs.Add((_vehicleSuggestions[i], _vehicleSuggestions[j]));
            }
        }

        return uniquePairs;
    }

    private async Task<(VehicleSuggestion, VehicleSuggestion)?> GenerateRandomSuggestionVoteAsync()
    {
        if (_vehicleSuggestions.Count < 2 || _uniquePairs is null) return null;

        await using LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        var existingPairs = dbContext.SuggestionVotes
            .Where(vote => vote.UserId == CurrentUser.Id)
            .Select(vote => new HashSet<Guid> { vote.VehicleSuggestion1Id, vote.VehicleSuggestion2Id })
            .ToHashSet(HashSet<Guid>.CreateSetComparer());
        var availablePairs = _uniquePairs
            .Where(pair => !existingPairs.Contains([pair.Item1.Id, pair.Item2.Id]))
            .ToList();
        if (availablePairs.Count is 0) return null;

        _progress = (double)existingPairs.Count / (existingPairs.Count + availablePairs.Count) * 100;
        var voteCounts = await dbContext.SuggestionVotes
            .GroupBy(v => new { v.VehicleSuggestion1Id, v.VehicleSuggestion2Id })
            .Select(g => new
            {
                Vehicle1Id = g.Key.VehicleSuggestion1Id,
                Vehicle2Id = g.Key.VehicleSuggestion2Id,
                Count = g.Count()
            })
            .ToDictionaryAsync(x => (x.Vehicle1Id, x.Vehicle2Id), x => x.Count);
        var pairsWithVoteCounts = availablePairs
            .Select(pair => new
            {
                Pair = pair,
                TotalVotes = (voteCounts.TryGetValue((pair.Item1.Id, pair.Item2.Id), out var count1) ? count1 : 0) +
                             (voteCounts.TryGetValue((pair.Item2.Id, pair.Item1.Id), out var count2) ? count2 : 0)
            })
            .ToList();

        int minVotes = pairsWithVoteCounts.Min(p => p.TotalVotes);
        var pairsWithMinVotes = pairsWithVoteCounts
            .Where(p => p.TotalVotes == minVotes)
            .Select(p => p.Pair)
            .ToList();
        var random = new Random();
        return pairsWithMinVotes[random.Next(pairsWithMinVotes.Count)];

    }

    private async Task VoteAsync(VehicleSuggestion selected)
    {
        _addingVote = true;
        StateHasChanged();
        var vote = new SuggestionVote
        {
            UserId = CurrentUser.Id,
            Id = Guid.CreateVersion7(),
            VehicleSuggestion1Id = CurrentChoice!.Value.Item1.Id,
            VehicleSuggestion2Id = CurrentChoice.Value.Item2.Id,
            VotedForVehicleId = selected.Id,
        };
        await using LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
        dbContext.SuggestionVotes.Add(vote);
        await dbContext.SaveChangesAsync();
        var matchupVotes = await dbContext.SuggestionVotes.Where(x => x.VehicleSuggestion1Id == CurrentChoice.Value.Item1.Id && x.VehicleSuggestion2Id == CurrentChoice.Value.Item2.Id || x.VehicleSuggestion1Id == CurrentChoice.Value.Item2.Id && x.VehicleSuggestion2Id == CurrentChoice.Value.Item1.Id).ToListAsync();
        var allVotes = await dbContext.SuggestionVotes.Where(x => x.VehicleSuggestion1Id == selected.Id || x.VehicleSuggestion2Id == selected.Id).ToListAsync();
        _lastMatchupFor = matchupVotes.Count(x => x.VotedForVehicleId == selected.Id);
        _lastMatchupAgainst = matchupVotes.Count - _lastMatchupFor;
        _lastTotalFor = allVotes.Count(x => x.VotedForVehicleId == selected.Id);
        _lastTotalAgainst = allVotes.Count - _lastTotalFor;
        _userTotalVotes = allVotes.Count(x => x.UserId == CurrentUser.Id);
        CurrentChoice = await GenerateRandomSuggestionVoteAsync();
        _lastSelection = await dbContext.VehicleSuggestions.Include(x => x.VotesFor).FirstAsync(x => x.Id == selected.Id);
        var leaderboard = LeaderboardService.GetLeaderboard();
        _leaderboardUpdateTime = LeaderboardService.GetNextRefreshTime().AddMinutes(-5);
        _totalVehicles = leaderboard.Count;

        ThisOrThatLeaderboardService.LeaderboardEntry? entry = leaderboard.FirstOrDefault(x => x.VehicleSuggestion.Id == selected.Id);
        _leaderboardRank = entry?.Rank;

        _addingVote = false;
        _showingStats = true;
        
        ResetSwipeState();

        StateHasChanged();
        StartStatsTimer();
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        _isSwiping = true;
        _touchStartX = e.Touches[0].ClientX;
        _swipingLeft = false;
        _swipingRight = false;
        StateHasChanged();

    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (!_isSwiping) return;

        double diffX = e.Touches[0].ClientX - _touchStartX;
        
        _swipingLeft = diffX < -20;
        _swipingRight = diffX > 20;

        // Apply transform with a maximum limit
        if (diffX > 0)
        {
            // Swiping right
            _leftImageTransform = Math.Min(diffX, 100);
            _rightImageTransform = 0;
        }
        else
        {
            // Swiping left
            _leftImageTransform = 0;
            _rightImageTransform = Math.Min(-diffX, 100);
        }

        StateHasChanged();
    }

    private async Task HandleTouchEnd(TouchEventArgs e)
    {
        if (!_isSwiping) return;

        double touchEndX = e.ChangedTouches[0].ClientX;
        double diffX = touchEndX - _touchStartX;

        if (Math.Abs(diffX) >= SwipeThreshold)
        {
            if (diffX > 0)
            {
                // Swiped right - vote for "That"
                if (CurrentChoice?.Item2 != null)
                {
                    await VoteAsync(CurrentChoice.Value.Item2);
                }
            }
            else
            {
                // Swiped left - vote for "This"
                if (CurrentChoice?.Item1 != null)
                {
                    await VoteAsync(CurrentChoice.Value.Item1);
                }
            }
        }
        else
        {
            ResetSwipeState();
            StateHasChanged();
        }

    }
    private void ResetSwipeState()
    {
        _leftImageTransform = 0;
        _rightImageTransform = 0;
        _isSwiping = false;
        _swipingLeft = false;
        _swipingRight = false;
    }


    private void StartStatsTimer()
    {
        _timerSeconds = 10;
        _timerProgress = 100;

        _statsTimer?.Dispose();
        _statsTimer = new Timer(TimerCallback, null, 0, 1000);
    }

    private void TimerCallback(object? state)
    {
        _timerSeconds--;
        _timerProgress = _timerSeconds * 10;

        if (_timerSeconds <= 0)
        {
            _statsTimer?.Dispose();
            _statsTimer = null;

            InvokeAsync(() =>
            {
                _showingStats = false;
                StateHasChanged();
            });
        }
        else
        {
            InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        _statsTimer?.Dispose();
        BrowserService.OnResize -= HandleResize;
    }

}