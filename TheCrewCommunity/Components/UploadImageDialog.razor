@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using TheCrewCommunity.Data
@using TheCrewCommunity.Data.GameData
@using TheCrewCommunity.Data.WebData
@using TheCrewCommunity.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<LiveBotDbContext> DbContextFactory
@inject ILogger<UploadImageDialog> Logger
@inject ICloudFlareImageService CfImageService
@inject IDatabaseMethodService DatabaseMethodService
@inject NavigationManager NavigationManager
@if (ShowDialog && _isLoggedIn)
{
    <div class="modal-background" @onclick="ToggleDialog">
        <div class="modal-content" @onclick:stopPropagation="true" >
            <div class="close" @onclick="ToggleDialog">
                <i class="fa fa-x"></i>
            </div>
            <h2 class="modal-title"><i class="fa fa-upload"></i> Upload Image</h2>
            <p class="modal-message">Select an image and the game that it belongs to</p>
            <EditForm Model="_uploadModel" OnValidSubmit="HandleUpload" class="form-container">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <label for="Image">Image</label>
                    <InputFile id="Image" accept=".jpg,.jpeg,.png,.webp" OnChange="HandleFileSelected"/>
                    @if (_isLoading)
                    {
                        <p>Loading file...</p>
                    }
                    @if (_isLoaded)
                    {
                        <span> <i class="fa fa-check" style="color: green"></i></span>
                    }
                    <ValidationMessage For="@(() => _uploadModel.Image)"/>
                </div>

                <div class="form-group">
                    <label for="GameId">Game</label>
                    <select id="GameId" class="game-select" @bind="@_uploadModel.GameId">
                        <option value="" disabled selected>-- Select a game --</option>
                        @foreach (Game game in _games)
                        {
                            <option value="@game.Id">@game.Name</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => _uploadModel.GameId)"/>
                </div>
                <div>
                    <button type="submit" class="button" disabled="@(!_isLoaded)">Upload</button>
                </div>

            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public bool ShowDialog { get; set; }

    string _title;
    readonly UploadModel _uploadModel = new();
    List<Game> _games { get; set; } = [];
    ApplicationUser? _user;
    bool _isLoading = false;
    bool _isLoaded = false;
    bool _isLoggedIn = false;

    class UploadModel
    {
        [Required(ErrorMessage = "Select a file")]
        public byte[] Image { get; set; }

        [Required(ErrorMessage = "You must select a game")]
        public Guid? GameId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            await using LiveBotDbContext dbContext = await DbContextFactory.CreateDbContextAsync();
            string? userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            _user = await dbContext.ApplicationUsers.FirstOrDefaultAsync(x => x.DiscordId == ulong.Parse(userId!));
            _games = await dbContext.Games.ToListAsync();
        }

        _isLoggedIn = _user is not null;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        Logger.LogDebug(CustomLogEvents.PhotoUpload, "Image added to the form");
        _isLoading = true;
        string ext = Path.GetExtension(e.File.Name);
        _title = FormatTitle(Path.GetFileNameWithoutExtension(e.File.Name));
        using MemoryStream ms = new();
        await e.File.OpenReadStream(10485760).CopyToAsync(ms);
        _uploadModel.Image = ms.ToArray();
        _isLoading = false;
        _isLoaded = true;
    }

    private string FormatTitle(string input)
    {
        return input.Length > 40 ? input[..37]+"..." : input;
    }
    

    private async Task HandleUpload()
    {
        if (_user is null || !_uploadModel.GameId.HasValue)
        {
            ToggleDialog();
            return;
        }
        PostImageResponse response = await CfImageService.PostImageAsync(_uploadModel.Image);
        if (response is {Success: true, Result:not null})
        {
            await DatabaseMethodService.AddUserImageAsync(_user, Guid.Parse(response.Result.Id), _title, _uploadModel.GameId.Value);
            NavigationManager.NavigateTo($"/i/{response.Result.Id}");
        }
    }

    public void ToggleDialog()
    {
        ShowDialog = !ShowDialog;
        if (ShowDialog) return;
        _isLoaded = false;
        _uploadModel.Image = [];
        _uploadModel.GameId = null;
    }

}